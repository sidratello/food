// Features/Reservation/presentation/controller/Reservation_Controller.dart
import 'package:flutter/material.dart';
import 'package:flutter_application_7/Features/Reservation/presentation/controllers/show_reservation_controller.dart';
import 'package:flutter_application_7/Features/Reservation/presentation/views/show_reservation_screen.dart';
import 'package:get/get.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_application_7/Features/Reservation/data/serveses/reservation_serveses.dart';


class Reservation_Controller extends GetxController {
  final ReservationService _service = ReservationService();

  final isLoading = false.obs;
  final availableSlots = <String>[].obs;

  /// ØªØ±Ø¬Ø¹ true Ø¥Ø°Ø§ ØªÙ… Ø§Ù„Ø­Ø¬Ø² Ø¨Ù†Ø¬Ø§Ø­
  Future<bool> submit(
    String date,
    int guestsCount,
    String notes,
    String startTime,
    String endTime,
  ) async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token') ?? '';

    if (token.isEmpty) {
      Get.snackbar("ØªÙ†Ø¨ÙŠÙ‡", "Ø§Ù„Ù…Ø³ØªØ®Ø¯Ù… ØºÙŠØ± Ù…Ø³Ø¬Ù„ Ø¯Ø®ÙˆÙ„");
      return false;
    }

    // ØªØ­Ù‚Ù‚ Ù…Ø­Ù„ÙŠ: ÙˆÙ‚Øª Ø§Ù„Ø¨Ø¯Ø§ÙŠØ© Ù‚Ø¨Ù„ Ø§Ù„Ù†Ù‡Ø§ÙŠØ©
    if (startTime.compareTo(endTime) >= 0) {
      Get.snackbar("ØªÙ†Ø¨ÙŠÙ‡", "ÙˆÙ‚Øª Ø§Ù„Ø¨Ø¯Ø§ÙŠØ© ÙŠØ¬Ø¨ Ø£Ù† ÙŠÙƒÙˆÙ† Ù‚Ø¨Ù„ ÙˆÙ‚Øª Ø§Ù„Ù†Ù‡Ø§ÙŠØ©");
      return false;
    }

    isLoading.value = true;
    availableSlots.clear();

    try {
      final res = await _service.AddReservation(
        date,
        guestsCount,
        notes,
        startTime,
        endTime,
        token,
      );

      isLoading.value = false;

      final msg = (res["message"] ?? "ØªÙ… Ø§Ù„Ø­Ø¬Ø² Ø¨Ù†Ø¬Ø§Ø­").toString();
      Get.snackbar("ØªÙ…", msg, backgroundColor: Colors.green, colorText: Colors.white);

      // ðŸ”¹ ØªØ­Ø¯ÙŠØ« Ø´Ø§Ø´Ø© Ø¹Ø±Ø¶ Ø§Ù„Ø­Ø¬ÙˆØ²Ø§Øª Ø¥Ø°Ø§ ÙƒØ§Ù†Øª Ù…Ø³Ø¬Ù„Ø©
      if (Get.isRegistered<ShowReservationController>()) {
        await Get.find<ShowReservationController>().getReservations();
      }

      // ðŸ”¹ Ø§Ù„Ø§Ù†ØªÙ‚Ø§Ù„ Ù„Ø´Ø§Ø´Ø© Ø¹Ø±Ø¶ Ø§Ù„Ø­Ø¬ÙˆØ²Ø§Øª Ù…Ø¨Ø§Ø´Ø±Ø©
      Get.off(() => ShowReservationScreen());

      return true;
    } catch (e) {
      isLoading.value = false;

      final raw = e.toString().replaceFirst("Exception: ", "").trim();

      // Ø§Ø³ØªØ®Ø±Ø§Ø¬ Ø§Ù„Ø£ÙˆÙ‚Ø§Øª Ø§Ù„Ù…ØªØ§Ø­Ø© Ø¥Ø°Ø§ Ù…ÙˆØ¬ÙˆØ¯Ø©
      final slotsRegex = RegExp(r'(\d{2}:\d{2}\s*-\s*\d{2}:\d{2})');
      final matches = slotsRegex.allMatches(raw).map((m) => m.group(0)!).toList();

      if (matches.isNotEmpty) {
        availableSlots.assignAll(matches);
      }

      Get.snackbar("ØºÙŠØ± Ù…ØªØ§Ø­", raw.isNotEmpty ? raw : "ØªØ¹Ø°Ù‘Ø± Ø¥ØªÙ…Ø§Ù… Ø§Ù„Ø­Ø¬Ø²",
          backgroundColor: Colors.red, colorText: Colors.white);

      return false;
    }
  }
}
